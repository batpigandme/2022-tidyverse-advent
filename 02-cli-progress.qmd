---
title: "Day 2: `cli_progress_*()`"
date: "2022-12-02"
description:  |
  Show progress in your code using the `cli_progress_*()` family of functions from the cli package.
tags: 
  - cli
  - progress bars
format: html
knitr: 
  opts_chunk: 
    collapse: true
    asciicast_at: "all"
---


```{r}
#| label: asciicast-setup
#| echo: false
#| results: hide
#| purl: false
asciicast::init_knitr_engine()
```

```{asciicast, include = FALSE, cache = FALSE}
#| label: asciicast-tick-time
set.seed(1)
Sys.setenv(CLI_TICK_TIME = "100")
```

```{asciicast, setup}
#| label: progress-setup
#| cache: false
#| include: false
library(cli)
options(cli.progress_show_after = 0)
options(cli.progress_clear = FALSE)
options(cli.progress_format_iterator = NULL)
options(cli.progress_format_iterator_nototal = NULL)
options(cli.progress_format_tasks = NULL)
options(cli.progress_format_tasks_nototal = NULL)
options(cli.progress_format_download = NULL)
options(cli.progress_format_download_nototal = NULL)
```

The [cli package](https://cli.r-lib.org/) provides helpers for developing attractive command line interfaces and output. It has lots of great features worth checking out, but today we're going to talk about one of my favorites: progress bars!

::: callout-tip
## Tip

This post is just a quick highlight reel, check out cli's progress-bar vignettes for more details:

-   [Introduction to progress bars in cli](https://cli.r-lib.org/articles/progress.html)

-   [Advanced cli progress bars](https://cli.r-lib.org/articles/progress-advanced.html)
:::

