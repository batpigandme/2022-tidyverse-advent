[
  {
    "objectID": "posts/01-separate-longer.html",
    "href": "posts/01-separate-longer.html",
    "title": "Day 1: separate_longer_*()",
    "section": "",
    "text": "Depending on how you get your data, the “tidying” process can take different forms. Much of the focus in the tidyr (Wickham and Girlich 2022) documentation (e.g. in the Rectangling vignette) focuses on dealing with nested data1.\nToday you’ll see how the new separate_longer_*() family of functions2 (formerly separate_rows()) can be used to unpack data that’s not nested, but, rather, has multiple strings to achieve what unnest_longer() does for nested data.\nWe’re going to look at the same data in two different formats: one where strings have been nested in a list column, and the other where there are multiple strings in a character column."
  },
  {
    "objectID": "posts/01-separate-longer.html#the-nested-version",
    "href": "posts/01-separate-longer.html#the-nested-version",
    "title": "Day 1: separate_longer_*()",
    "section": "The nested version",
    "text": "The nested version\nFirst, let’s create a nested version.\n\nlibrary(tidyverse)\n\n\nnested_df <- tibble(\n  song = c(\"Rake it Up\", \"Bang Bang\", \"Side to Side\"),\n  artist = list(c(\"Yo Gotti\", \"Nicki Minaj\"), c(\"Jessie J\", \"Ariana Grande\", \"Nicki Minaj\"), c(\"Ariana Grande\", \"Nicki Minaj\"))\n)\n\nnested_df\n\n# A tibble: 3 × 2\n  song         artist   \n  <chr>        <list>   \n1 Rake it Up   <chr [2]>\n2 Bang Bang    <chr [3]>\n3 Side to Side <chr [2]>\n\n\nAs you can see, we have three songs, and an artist column which contains the lists of artists on each song.\nTo tidy this up, we’ll use unnest_longer().\n\nnested_df %>%\n  unnest_longer(artist)\n\n# A tibble: 7 × 2\n  song         artist       \n  <chr>        <chr>        \n1 Rake it Up   Yo Gotti     \n2 Rake it Up   Nicki Minaj  \n3 Bang Bang    Jessie J     \n4 Bang Bang    Ariana Grande\n5 Bang Bang    Nicki Minaj  \n6 Side to Side Ariana Grande\n7 Side to Side Nicki Minaj"
  },
  {
    "objectID": "posts/01-separate-longer.html#the-multiple-strings-in-a-row-version",
    "href": "posts/01-separate-longer.html#the-multiple-strings-in-a-row-version",
    "title": "Day 1: separate_longer_*()",
    "section": "The multiple-strings in a row version",
    "text": "The multiple-strings in a row version\nNow let’s look at the same data in a different shape of sorts—one in which the artists are stored as a single character string separated by commas.\n\nstringy_df <- tibble(\n  song = c(\"Rake it Up\", \"Bang Bang\", \"Side to Side\"),\n  artist = c(\"Yo Gotti, Nicki Minaj\", \"Jessie J, Ariana Grande, Nicki Minaj\", \"Ariana Grande, Nicki Minaj\")\n)\n\nstringy_df\n\n# A tibble: 3 × 2\n  song         artist                              \n  <chr>        <chr>                               \n1 Rake it Up   Yo Gotti, Nicki Minaj               \n2 Bang Bang    Jessie J, Ariana Grande, Nicki Minaj\n3 Side to Side Ariana Grande, Nicki Minaj          \n\n\nWe can use separate_longer_delim() along with the delim argument to get the same result for this data frame that we did for the nested one.\n\nstringy_df %>%\n  separate_longer_delim(artist, delim = \", \")\n\n# A tibble: 7 × 2\n  song         artist       \n  <chr>        <chr>        \n1 Rake it Up   Yo Gotti     \n2 Rake it Up   Nicki Minaj  \n3 Bang Bang    Jessie J     \n4 Bang Bang    Ariana Grande\n5 Bang Bang    Nicki Minaj  \n6 Side to Side Ariana Grande\n7 Side to Side Nicki Minaj"
  },
  {
    "objectID": "posts/01-separate-longer.html#different-inputs-same-output",
    "href": "posts/01-separate-longer.html#different-inputs-same-output",
    "title": "Day 1: separate_longer_*()",
    "section": "Different inputs, same output",
    "text": "Different inputs, same output\nThe diagram below illustrates how the two different data frames each produced the same result by using the relevant functions.\n\n\n\nNested data frame transformed to tidy output using unnest_longer().\n\n\n\n\n\nData frame with comma-delimited strings in artist column transformed to tidy output with separate_longer_delim()."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A very tidy advent 2022",
    "section": "",
    "text": "Day 1: separate_longer_*()\n\n\n2 min\n\n\nLearn about tidyr’s separate_longer_*() functions which separate strings into multiple rows.\n\n\n\n2022-12-01\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]