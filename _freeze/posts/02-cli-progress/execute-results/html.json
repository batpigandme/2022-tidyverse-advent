{
  "hash": "6d7751d5a67458df7934597d1dc54ed1",
  "result": {
    "markdown": "---\ntitle: \"Day 02: `cli_progress_*()`\"\ndate: \"2022-12-02\"\ndescription:  |\n  Show progress in your code using the `cli_progress_*()` family of functions from the cli package.\ntags: \n  - cli\n  - progress bars\nimage: cli-cleaning-data-indicator-image-min.png\nimage-alt: \"Two progress bars, the first of which says Cleaning data #1 with a green bar and indicator of 100%, the second says Cleaning data #2 has a partially filled green progress bar and reads 28% followed by an ETA of 2s.\"\nformat: \n  html:\n    code-line-numbers: true\nknitr: \n  opts_chunk: \n    collapse: true\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThe [cli package](https://cli.r-lib.org/) [@cli] provides helpers for developing attractive command line interfaces and output. It has lots of great features worth checking out, but today we're going to talk about one of my favorites: progress bars!\n\n::: callout-tip\n## Tip\n\nThis post is just a quick highlight reel, check out cli's progress-bar vignettes for more details:\n\n-   [Introduction to progress bars in cli](https://cli.r-lib.org/articles/progress.html)\n\n-   [Advanced cli progress bars](https://cli.r-lib.org/articles/progress-advanced.html)\n:::\n\n## Progress bar basics\n\nTo lift straight from the [progress-bar intro vignette](https://cli.r-lib.org/articles/progress.html), adding a progress bar is a three-step/three-function process:\n\n1.  Call [`cli_progress_bar()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to create a progress bar.\n\n2.  Call [`cli_progress_update()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to update it.\n\n3.  Call [`cli_progress_done()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to terminate it.\n\nWe'll use these three steps in our pretend cleaning function, below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean <- function() {\n  cli_progress_bar(\"Cleaning data\", total = 100)\n  for (i in 1:100) {\n    Sys.sleep(5/100)\n    cli_progress_update()\n  }\n  cli_progress_done()\n}\n```\n:::\n\n\nWe created our progress bar with `cli_progress_bar()` on line 2, told it how often to update (after each iteration) with `cli_progress_update()` on line 5, and when to finish with `cli_progress_done()` on line 7.\n\nIf we were to run that function, we'd get the following output.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nclean()\n```\n:::\n\n\n![](cli-classic-example.svg){fig-alt=\"Progress bar that says \\\"cleaning data\\\" with a series of boxes that update along with a percentage and an ETA until done.\"}\n\n## Unknown total\n\n*But what if I don't know how many units total?* Don't worry, there's still a way to show your progress with an [unknown total number of units](https://cli.r-lib.org/articles/progress.html#unknown-total-number-of-units). You can omit the total number from the `cli_progress_bar()` function, and use `force = TRUE` inside of `cli_progress_update()`, as seen on line 8 of the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalk_dirs <- function() {\n  cli_progress_bar(\"Walking directories\")\n  while (TRUE) {\n    if (runif(1) < 0.01) break\n    Sys.sleep(0.01)\n    cli_progress_update()\n  }\n  cli_progress_update(force = TRUE)\n}\nwalk_dirs()\n```\n:::\n\n\nNaturally, the output will look different, since you don't have a known total on which to base your progress percentage.\n\n![](cli-unknown-total-example.svg){fig-alt=\"Command line interface with animated wheel that reads \\\"Walking directories\\\" followed by the number done, the number per second, and time elapsed.\"}\n\n## Progress without bars\n\nWant to know how your code is going but don't want or need a progress bar along the way? Check out the [`cli_progress_message()`](https://cli.r-lib.org/reference/cli_progress_message.html) and [`cli_progress_step()`](https://cli.r-lib.org/reference/cli_progress_step.html) functions.\n\n`cli_progress_step()` makes use of cli feaatures, such as [`cli_alert()`](https://cli.r-lib.org/reference/cli_alert.html) themes to show colored icons indicating information, success, and danger, and will show you the duration of each step after it's completed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function() {\n  cli_progress_step(\"Downloading data\")\n  Sys.sleep(2)\n\n  cli_progress_step(\"Importing data\")\n  Sys.sleep(1)\n\n  cli_progress_step(\"Cleaning data\")\n  Sys.sleep(2)\n\n  cli_progress_step(\"Fitting model\")\n  Sys.sleep(3)\n}\nf()\n```\n:::\n\n\n![](cli-progress_step_simple-example.svg){fig-alt=\"Bullets for Downloading data, Importing data, Cleaning data, and Fitting model each of which is preceded by an icon indicating whether or not it is finished and followed by the duration it took when done.\"}\n\n## Learn more\n\nThis is but a paltry sampling of what you can do with the `cli_progress_*()` functions, so be sure to take the time to check out [cli documentation](https://cli.r-lib.org/)!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}