{
  "hash": "2301d6b870105d42b33935551a364574",
  "result": {
    "markdown": "---\ntitle: \"Day 2: `cli_progress_*()`\"\ndate: \"2022-12-02\"\ndescription:  |\n  Show progress in your code using the `cli_progress_*()` family of functions from the cli package.\ntags: \n  - cli\n  - progress bars\nformat: \n  html:\n    code-line-numbers: true\nknitr: \n  opts_chunk: \n    collapse: true\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThe [cli package](https://cli.r-lib.org/) [@cli] provides helpers for developing attractive command line interfaces and output. It has lots of great features worth checking out, but today we're going to talk about one of my favorites: progress bars!\n\n::: callout-tip\n## Tip\n\nThis post is just a quick highlight reel, check out cli's progress-bar vignettes for more details:\n\n-   [Introduction to progress bars in cli](https://cli.r-lib.org/articles/progress.html)\n\n-   [Advanced cli progress bars](https://cli.r-lib.org/articles/progress-advanced.html)\n:::\n\n## Progress bar basics\n\nTo lift straight from the [progress-bar intro vignette](https://cli.r-lib.org/articles/progress.html), adding a progress bar is a three-step/three-function process:\n\n1.  Call [`cli_progress_bar()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to create a progress bar.\n\n2.  Call [`cli_progress_update()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to update it.\n\n3.  Call [`cli_progress_done()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to terminate it.\n\nWe'll use these three steps in our pretend cleaning function, below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean <- function() {\n  cli_progress_bar(\"Cleaning data\", total = 100)\n  for (i in 1:100) {\n    Sys.sleep(5/100)\n    cli_progress_update()\n  }\n  cli_progress_done()\n}\n```\n:::\n\n\nWe created our progress bar with `cli_progress_bar()` on line 2, told it how often to update (after each iteration) with `cli_progress_update()` on line 5, and when to finish with `cli_progress_done()` on line 7.\n\nIf we were to run that function, we'd get the following output.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nclean()\n```\n:::\n\n\n![](cli-classic-example.svg){fig-alt=\"Progress bar that says \\\"cleaning data\\\" with a series of boxes that update along with a percentage and an ETA until done.\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}