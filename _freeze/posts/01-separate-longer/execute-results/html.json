{
  "hash": "108b3ba53a2836b30b6afd605055bd72",
  "result": {
    "markdown": "---\ntitle: \"Day 1: `separate_longer_*()`\"\ndate: \"2022-12-01\"\ndescription:  |\n  Learn about tidyr's `separate_longer_*()` functions which separate strings into multiple rows.\ntags: \n  - tidyr\n  - functions\nimage: \"song_artist_longer_transform_unnest_longer_separate_longer-min.png\"\nimage-alt: \"A nested data frame (left), with a song character column, and a an artist list column is transformed into a data frame with one artist and song per row by using the unnest_longer() function. A data frame (right) with two character columns, song and artist, that contains multiple artists in the artist column as a string separated by commas is transformed into a tidy data frame with one song per row and one artist per row using separate_longer_delim().\"\nfig-cap-location: top\n---\n\n\nDepending on how you get your data, the \"tidying\" process can take different forms. Much of the focus in the tidyr [@tidyr] documentation (e.g. in the [Rectangling vignette](https://tidyr.tidyverse.org/articles/rectangle.html)) focuses on dealing with *nested* data[^1].\n\nToday you'll see how the new [`separate_longer_*()`](https://tidyr.tidyverse.org/dev/reference/separate_longer_delim.html) family of functions[^2] (formerly [`separate_rows()`](https://tidyr.tidyverse.org/reference/separate_rows.html)) can be used to unpack data that's not nested, but, rather, has multiple strings to achieve what [`unnest_longer()`](https://tidyr.tidyverse.org/reference/hoist.html) does for nested data.\n\nWe're going to look at the same data in two different formats: one where strings have been nested in a list column, and the other where there are multiple strings in a character column.\n\nHere's a quick visual summary, below, of what we'll do in the code that follows.\n\n![A nested data frame with a list column is transformed to tidy output using `unnest_longer()`, a data frame with the same data as a comma-separated character column is transformed to tidy output using `separate_longer_delim()`.](song_artist_longer_transform_unnest_longer_separate_longer-min.png){.column-page #fig-combo fig-alt=\"A nested data frame (left), with a song character column, and a an artist list column is transformed into a data frame with one artist and song per row by using the unnest_longer() function. A data frame (right) with two character columns, song and artist, that contains multiple artists in the artist column as a string separated by commas is transformed into a tidy data frame with one song per row and one artist per row using separate_longer_delim().\"}\n\n## The nested version\n\nFirst, let's create a nested version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnested_df <- tibble(\n  song = c(\"Rake it Up\", \"Bang Bang\", \"Side to Side\"),\n  artist = list(c(\"Yo Gotti\", \"Nicki Minaj\"), c(\"Jessie J\", \"Ariana Grande\", \"Nicki Minaj\"), c(\"Ariana Grande\", \"Nicki Minaj\"))\n)\n\nnested_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  song         artist   \n  <chr>        <list>   \n1 Rake it Up   <chr [2]>\n2 Bang Bang    <chr [3]>\n3 Side to Side <chr [2]>\n```\n:::\n:::\n\n\nAs you can see, we have three songs, and an `artist` column which contains the lists of artists on each song.\n\nTo tidy this up, we'll use `unnest_longer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnested_df %>%\n  unnest_longer(artist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  song         artist       \n  <chr>        <chr>        \n1 Rake it Up   Yo Gotti     \n2 Rake it Up   Nicki Minaj  \n3 Bang Bang    Jessie J     \n4 Bang Bang    Ariana Grande\n5 Bang Bang    Nicki Minaj  \n6 Side to Side Ariana Grande\n7 Side to Side Nicki Minaj  \n```\n:::\n:::\n\n\n## The comma-separated-string version\n\nNow let's look at the same data in a different shape of sorts---one in which the artists are stored as a single character string separated by commas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringy_df <- tibble(\n  song = c(\"Rake it Up\", \"Bang Bang\", \"Side to Side\"),\n  artist = c(\"Yo Gotti, Nicki Minaj\", \"Jessie J, Ariana Grande, Nicki Minaj\", \"Ariana Grande, Nicki Minaj\")\n)\n\nstringy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  song         artist                              \n  <chr>        <chr>                               \n1 Rake it Up   Yo Gotti, Nicki Minaj               \n2 Bang Bang    Jessie J, Ariana Grande, Nicki Minaj\n3 Side to Side Ariana Grande, Nicki Minaj          \n```\n:::\n:::\n\n\nWe can use `separate_longer_delim()` along with the `delim` argument to get the same result for this data frame that we did for the nested one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringy_df %>%\n  separate_longer_delim(artist, delim = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  song         artist       \n  <chr>        <chr>        \n1 Rake it Up   Yo Gotti     \n2 Rake it Up   Nicki Minaj  \n3 Bang Bang    Jessie J     \n4 Bang Bang    Ariana Grande\n5 Bang Bang    Nicki Minaj  \n6 Side to Side Ariana Grande\n7 Side to Side Nicki Minaj  \n```\n:::\n:::\n\n\nTo separate by a fixed width rather than a delimiter, you can use [`separate_longer_position()`](https://tidyr.tidyverse.org/dev/reference/separate_longer_delim.html).\n\n## Different inputs, same output\n\nThe diagram below illustrates how the two different data frames each produced the same result by using the relevant functions.\n\n![Nested data frame transformed to tidy output using `unnest_longer()`.](song_artist_longer_transform_unnest_longer-min.png){#fig-unnest-longer fig-alt=\"The nested data frame, with a song column, and a list column with artists is transformed into a data frame with one artist and song per row by using the unnest_longer() function.\"}\n\n![Data frame with comma-delimited strings in artist column transformed to tidy output using `separate_longer_delim()`.](song_artist_longer_transform_separate_longer-min.png){#fig-separate-longer fig-alt=\"A data frame with two character columns, song and artist, that contains multiple artists in the artist column as a string separated by commas is transformed into a tidy data frame with one song per row and one artist per row using separate_longer_delim().\"}\n\n[^1]: This makes sense, given that wild-caught data from JSON and XML are often deeply nested.\n\n[^2]: Note that you'll need to install the development version of tidyr in order to use these functions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}