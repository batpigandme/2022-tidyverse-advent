{
  "hash": "9a00c0e693f3505827085399cfcb7583",
  "result": {
    "markdown": "---\ntitle: \"Day 16: `rbind_pages()`\"\ndate: \"2022-12-16\"\ndescription: |\n  Got paginated JSON data? The `rbind_pages()` function from Jeroen Ooms' jsonlite package is here to save the day.\nimage: rbind-pages-thumb-min.png\nimage-alt: \"rbind_pages(list()) written with three light pink data-frame icons in between the list parentheses. A downward arrow leads to a larger, darker pink data-frame icon.\"\ntags: \n  - jsonlite\n---\n\n\n::: callout-note\n## Note\n\nThe [jsonlite](https://github.com/jeroen/jsonlite) package is authored and maintained by [Jeroen Ooms](https://github.com/jeroen). I've decided to include it since it's installed and recommended by the tidyverse package for reading JSON data, and also *super* helpful!\n:::\n\nTo borrow from its description on GitHub, [jsonlite](https://github.com/jeroen/jsonlite) [@jsonlite]:\n\n> Offers simple, flexible tools for working with JSON in R, and is particularly powerful for building pipelines and interacting with a web API.\n\nBasically, it provides mapping between JSON data and R classes and objects (like data frames).\n\nWhen working with web APIs, you'll often encounter *paginated* data where the amount of data return is broken into pages with a given number of records. Once you've read in the data with the [`fromJSON()`](https://rdrr.io/cran/jsonlite/man/fromJSON.html) function, chances are that you'll want to combine those pages into a single data frame for your analysis. This is where [**`rbind_pages()`**](https://rdrr.io/cran/jsonlite/man/rbind_pages.html) comes in. It uses [`vctrs::vec_rbind()`](https://vctrs.r-lib.org/reference/vec_bind.html) to combine a list of data frames into a single data frame.\n\nLet's do a quick example using data on the most popular TV shows from the [EpisoDate API](https://www.episodate.com/api). We'll get the first three pages of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\n\n# base URL of the page\nbaseurl <- \"https://www.episodate.com/api/most-popular?page=\"\n\nmydata1 <- fromJSON(paste0(baseurl, \"1\"), flatten = TRUE)\nmydata2 <- fromJSON(paste0(baseurl, \"2\"), flatten = TRUE)\nmydata3 <- fromJSON(paste0(baseurl, \"3\"), flatten = TRUE)\n\n# look at the data for one of the pages\ndplyr::glimpse(mydata1$tv_shows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20\nColumns: 9\n$ id                   <int> 35624, 23455, 29560, 43467, 43234, 46692, 24010, …\n$ name                 <chr> \"The Flash\", \"Game of Thrones\", \"Arrow\", \"Lucifer…\n$ permalink            <chr> \"the-flash\", \"game-of-thrones\", \"arrow\", \"lucifer…\n$ start_date           <chr> \"2014-10-07\", \"2011-04-17\", \"2012-10-10\", \"2016-0…\n$ end_date             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ country              <chr> \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"…\n$ network              <chr> \"The CW\", \"HBO\", \"The CW\", \"Netflix\", \"The CW\", \"…\n$ status               <chr> \"Running\", \"Ended\", \"Ended\", \"Ended\", \"Ended\", \"E…\n$ image_thumbnail_path <chr> \"https://static.episodate.com/images/tv-show/thum…\n```\n:::\n:::\n\n\nEach page contains 20 records. We'll use `rbind_pages()` to combine the data from each page, which is stored in the `tv_shows` element of each page, then look at the number of rows to see that combining three pages results in the expected 60 records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_shows <- rbind_pages(\n  list(mydata1$tv_shows, mydata2$tv_shows, mydata3$tv_shows)\n)\n\nnrow(tv_shows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n:::\n\n\n## Learn more\n\nFor more details on using `rbind_pages()`, including example code for automatically combining many pages, see the jsonlite vignette, [**Combining pages of JSON data with jsonlite**](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-paging.html). Also be sure to check out the other vignettes:\n\n* [Getting started with JSON and jsonlite](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html);  \n* [Fetching JSON data from REST APIs](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-apis.html);  \n* [A mapping between JSON data and R objects](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-mapping.pdf); and \n* [Simple JSON RPC with OpenCPU](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-opencpu.pdf).\n\nYou can learn the details of how jsonlite works in the paper \n[**The jsonlite Package: A Practical and Consistent Mapping Between JSON Data and R Objects**](https://arxiv.org/abs/1403.2805) [@jsonlite].\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}