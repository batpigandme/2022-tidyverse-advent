{
  "hash": "ead6bc578ff64269f319cde0b78716c7",
  "result": {
    "markdown": "---\ntitle: \"Day 07: `slider::slide()`\"\ndate: \"2022-12-07\"\ndescription:  |\n  Do window-based computations, like rolling averages and cumulative sums, by \"sliding\" across your data with `slider::slide()` and friends.\nimage: slide-function-thumb-min.png\nimage-alt: \"Expression that reads slide(, fn, .before = 1) where the first argument is a stack of four colored blocks. This is followed by an arrow indicating that this computes fn() around: the first block, the first and second, second and third, and third and fourth.\"\n---\n\n\nThe [slider](https://slider.r-lib.org/index.html) package provides \"sliding window\" functions that let you iterate over windows of your data to compute things like rolling averages and cumulative sums [@slider].\n\n[`slide()`](https://slider.r-lib.org/reference/slide.html) is similar to [`purrr::map()`](https://purrr.tidyverse.org/reference/map.html), but instead of applying a function, `.f`, to each *element* of its input, `.x`, it applies the function to each *window* of `.x`, returning a list of the same length as the input.[^1]\n\nThe windows are most easily defined using the `.before` and/or `.after` arguments, which can also be set to `Inf` should you want your window to be ever expanding.\n\nLet's take a look a a simple example, calculating the mean for each element of a vector with a window that includes one value before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(slider)\nour_vec <- c(2:5)\nslide(our_vec, mean, .before = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2\n\n[[2]]\n[1] 2.5\n\n[[3]]\n[1] 3.5\n\n[[4]]\n[1] 4.5\n```\n:::\n:::\n\n\nNote that the value returned for our first element, above, is the same as that element (2). This is because it has no values before it, and `slide()`'s default behavior is to compute on incomplete windows. You can use the `complete` argument to tell `slide()` to only compute on complete windows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslide(our_vec, mean, .before = 1, .complete = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nNULL\n\n[[2]]\n[1] 2.5\n\n[[3]]\n[1] 3.5\n\n[[4]]\n[1] 4.5\n```\n:::\n:::\n\n\nAs mentioned, you can set `.before` to `Inf` to do an ***expanding*** window computation (meaning that it includes everything that came before it).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslide(our_vec, mean, .before = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2\n\n[[2]]\n[1] 2.5\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] 3.5\n```\n:::\n:::\n\n\n## Learn more\n\nIn addition to `slide()`, slider has two other core functions, [`slide_index()`](https://slider.r-lib.org/reference/slide_index.html) (which allows you to do a rolling computation relative to an index), and [`slide_period()`](https://slider.r-lib.org/reference/slide_period.html) (which lets you break up an index into chunks by periods, such as months). You can learn more about all three of these functions in the introductory vignette, [**Getting started with slider**](https://slider.r-lib.org/articles/slider.html).\n\nWant to fit this into a row-oriented workflow? See [**Row-wise iteration with slider**](https://slider.r-lib.org/articles/rowwise.html).\n\nWondering how `slide()` fits in with the [tsibble](https://tsibble.tidyverts.org/) package [@tsibble] from whence it came? Then [**Converting from tsibble**](https://slider.r-lib.org/articles/tsibble.html) is the vignette for you.\n\nDavis Vaughan (the author of slider) also gave a 5-minute lightning talk, [**Sliding Windows and Calendars**](https://www.rstudio.com/resources/rstudioconf-2020/sliding-windows-and-calendars-davis-vaughan/), at rstudio::conf(2020) on using slider with the [almanac](https://davisvaughan.github.io/almanac/) package---particularly handy if you've got a time series with missing data.\n\n[^1]: Like purrr, `slide_*()` has type-suffixed variants (e.g. `slide_int(),` `slide_chr(),` `slide_dfr()`, etc.).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}