{
  "hash": "088a9965821e3dec8e5b05e3480c8852",
  "result": {
    "markdown": "---\ntitle: \"Day 06: `glimpse()`\"\ndate: \"2022-12-06\"\ndescription: \"An easy way to take a quick peek at all of the columns in your data frame (and as much data as fits on a row), `glimpse()` is like a transposed version of `print()` that lets you see your columns as rows.\"\nimage: glimpse-thumb-min.png\nimage-alt: \"glimpse() in bold letters in the foreground overlaying a background that faintly shows the output of glimpse for a data frame.\"\ntags: \n  - dplyr\n  - pillar\nknitr: \n      opts_chunk: \n        collapse: true\n        comment: \"#>\"\n---\n\n\nA function so nice we've exported ([and documented](https://github.com/tidyverse/dplyr/issues/6008)) it twice, [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.html) is provided by the pillar package [@pillar], but is re-exported by dplyr [@dplyr] for your convenience. Heck, we even named [a newsletter](https://posit.co/blog/rstudio-glimpse-newsletter-01/) after it!\n\nWhat exactly does glimpse do? Well, according to the function reference:\n\n> `glimpse()` is like a transposed version of [`print()`](https://rdrr.io/r/base/print.html): columns run down the page, and data runs across. This makes it possible to see every column in a data frame. It's a little like [`str()`](https://rdrr.io/r/utils/str.html) applied to a data frame but it tries to show you as much data as possible. (And it always shows the underlying data, even when applied to a remote data source.)\n\nThis is a case where it's easier to show than tell. Let's take a look at some real data, we'll use today's [2022-2023 NBA Player Stats: Totals](https://www.basketball-reference.com/leagues/NBA_2023_totals.html) acquired through [Basketball Reference](https://www.basketball-reference.com/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nbref_data <- read_csv(here::here(\"data\", \"bref-data.csv\"))\n```\n:::\n\n\nOur data is in a tibble, so the default [print formatting](https://tibble.tidyverse.org/reference/formatting.html) is pretty good. It shows us as many columns as can fit on the screen as determined by the `width` option with their types and first ten rows, followed by a summary of the remaining rows and columns.\n\n::: column-body-outset\n\n::: {.cell}\n\n```{.r .cell-code}\nbref_data\n#> # A tibble: 480 × 30\n#>    player  position   age team  games game_starts minutes   fgm   fga fg_percent\n#>    <chr>   <chr>    <dbl> <chr> <dbl>       <dbl>   <dbl> <dbl> <dbl>      <dbl>\n#>  1 Kevin … PF          34 BRK      25          25     922   265   479      0.553\n#>  2 Jayson… PF          24 BOS      24          24     887   242   504      0.48 \n#>  3 Luka D… PG          23 DAL      22          22     810   254   498      0.51 \n#>  4 Stephe… PG          34 GSW      23          23     800   233   467      0.499\n#>  5 Shai G… SG          24 OKC      22          22     786   235   464      0.506\n#>  6 Devin … SG          26 PHO      24          24     859   244   500      0.488\n#>  7 Donova… SG          26 CLE      22          22     803   216   443      0.488\n#>  8 Jaylen… SF          26 BOS      23          23     826   228   452      0.504\n#>  9 Trae Y… PG          24 ATL      22          22     781   194   476      0.408\n#> 10 Gianni… PF          28 MIL      19          19     626   223   410      0.544\n#> # … with 470 more rows, and 20 more variables: fg3m <dbl>, fg3a <dbl>,\n#> #   fg3_percent <dbl>, fg2m <dbl>, fg2a <dbl>, fg2_percent <dbl>,\n#> #   e_fg_percent <dbl>, ftm <dbl>, fta <dbl>, ft_percent <dbl>, oreb <dbl>,\n#> #   dreb <dbl>, treb <dbl>, ast <dbl>, stl <dbl>, blk <dbl>, tov <dbl>,\n#> #   pf <dbl>, pts <dbl>, player_additional <chr>\n```\n:::\n\n:::\n\nHowever, because this tibble is quite wide, there's a lot of information being relegated to that dense summary at the bottom. **`glimpse()`** is the perfect way to get a bit more detail about what's in there before doing my analysis.\n\nBelow, I'll put the data directly into the function, but you can also use the pipe if you prefer.\n\n::: column-body-outset\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(bref_data)\n#> Rows: 480\n#> Columns: 30\n#> $ player            <chr> \"Kevin Durant\", \"Jayson Tatum\", \"Luka Dončić\", \"Step…\n#> $ position          <chr> \"PF\", \"PF\", \"PG\", \"PG\", \"SG\", \"SG\", \"SG\", \"SF\", \"PG\"…\n#> $ age               <dbl> 34, 24, 23, 34, 24, 26, 26, 26, 24, 28, 33, 25, 29, …\n#> $ team              <chr> \"BRK\", \"BOS\", \"DAL\", \"GSW\", \"OKC\", \"PHO\", \"CLE\", \"BO…\n#> $ games             <dbl> 25, 24, 22, 23, 22, 24, 22, 23, 22, 19, 23, 26, 20, …\n#> $ game_starts       <dbl> 25, 24, 22, 23, 22, 24, 22, 23, 22, 19, 23, 26, 20, …\n#> $ minutes           <dbl> 922, 887, 810, 800, 786, 859, 803, 826, 781, 626, 80…\n#> $ fgm               <dbl> 265, 242, 254, 233, 235, 244, 216, 228, 194, 223, 20…\n#> $ fga               <dbl> 479, 504, 498, 467, 464, 500, 443, 452, 476, 410, 41…\n#> $ fg_percent        <dbl> 0.553, 0.480, 0.510, 0.499, 0.506, 0.488, 0.488, 0.5…\n#> $ fg3m              <dbl> 39, 82, 61, 117, 22, 57, 85, 55, 48, 15, 10, 69, 9, …\n#> $ fg3a              <dbl> 115, 225, 178, 271, 67, 146, 202, 157, 162, 63, 32, …\n#> $ fg3_percent       <dbl> 0.339, 0.364, 0.343, 0.432, 0.328, 0.390, 0.421, 0.3…\n#> $ fg2m              <dbl> 226, 160, 193, 116, 213, 187, 131, 173, 146, 208, 19…\n#> $ fg2a              <dbl> 364, 279, 320, 196, 397, 354, 241, 295, 314, 347, 38…\n#> $ fg2_percent       <dbl> 0.621, 0.573, 0.603, 0.592, 0.537, 0.528, 0.544, 0.5…\n#> $ e_fg_percent      <dbl> 0.594, 0.562, 0.571, 0.624, 0.530, 0.545, 0.584, 0.5…\n#> $ ftm               <dbl> 178, 172, 165, 106, 197, 136, 108, 104, 171, 145, 16…\n#> $ fta               <dbl> 194, 198, 230, 117, 212, 156, 122, 125, 190, 234, 18…\n#> $ ft_percent        <dbl> 0.918, 0.869, 0.717, 0.906, 0.929, 0.872, 0.885, 0.8…\n#> $ oreb              <dbl> 9, 27, 19, 12, 21, 20, 18, 22, 17, 39, 11, 57, 68, 2…\n#> $ dreb              <dbl> 157, 172, 168, 140, 84, 97, 67, 141, 47, 176, 90, 16…\n#> $ treb              <dbl> 166, 199, 187, 152, 105, 117, 85, 163, 64, 215, 101,…\n#> $ ast               <dbl> 135, 101, 188, 162, 132, 142, 107, 84, 212, 104, 107…\n#> $ stl               <dbl> 18, 24, 40, 24, 39, 24, 30, 22, 16, 16, 21, 15, 27, …\n#> $ blk               <dbl> 44, 25, 15, 6, 25, 10, 10, 10, 3, 20, 9, 18, 48, 5, …\n#> $ tov               <dbl> 86, 66, 79, 72, 73, 61, 68, 71, 76, 70, 45, 56, 40, …\n#> $ pf                <dbl> 62, 54, 64, 49, 54, 64, 54, 63, 30, 65, 63, 53, 57, …\n#> $ pts               <dbl> 747, 738, 734, 689, 689, 681, 625, 615, 607, 606, 58…\n#> $ player_additional <chr> \"duranke01\", \"tatumja01\", \"doncilu01\", \"curryst01\", …\n```\n:::\n\n:::\n\nBehold! My columns are all lined up (as rows), with their types and previews of the data therein. It's not a detailed summary[^1], but it's a nice ***glimpse*** of what your data hold.\n\n::: callout-note\n## Note\n\nIf you'd *really* like the nitty-gritty details behind `glimpse()`'s formatting, pillar's [`format_glimpse()`](https://pillar.r-lib.org/reference/format_glimpse.html) provides the logic for its printing of vectors.\n:::\n\n[^1]: For that, I'm a fan of the [skimr](https://docs.ropensci.org/skimr/) package [@skimr].\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}