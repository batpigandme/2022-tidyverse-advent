{
  "hash": "c0470b4e810040edc4059fff33e41cb5",
  "result": {
    "markdown": "---\ntitle: \"Day 20: `fs::dir_ls()`\"\ndate: \"2022-12-20\"\ndescription: |\n  Equivalent to the `ls` command, `dir_ls()` returns filenames as a named character vector of `fs_paths`, making it perfect for passing into the `.id` argument of `purrr::map_df()`.\nimage: fs-dir-ls-thumb-min.png\nimage-alt: \"fs::dir_ls() written in monospaced font on pink background.\"\ntags: \n  - fs\nreference-location: margin\n---\n\n\nThe [**fs**](https://fs.r-lib.org/) package [@fs] is built on the [libuv](http://docs.libuv.org/en/v1.x/fs.html) C library, and provides a cross-platform, uniform interface to file-system operations. **fs** functions fall into four main categories, each of which has its own function prefix:\n\n-   `path_` for manipulating and constructing paths;\n\n-   `file_` for files;\n\n-   `dir_` for directories; and\n\n-   `link_` for links\n\n[**`dir_ls()`**](https://fs.r-lib.org/reference/dir_ls.html) is equivalent to the Shell `ls` command. It returns filenames from the directory to which it is applied as a named `fs_path`[^1] character vector where the names are equivalent to the values. This is perfect for use with the `.id` argument of functions like [`purrr::map_df()`](https://purrr.tidyverse.org/reference/map.html) the output of which stores the name (if `.x` is named).\n\nLet's look at how we can use these functions together to read in a directory of CSVs with their filenames in the resulting data frame. In this example, I'll use data from [Basketball Reference](https://www.basketball-reference.com/playoffs/NBA_2022_totals.html) with player statistics from several years of NBA Playoffs.\n\nI'll start out by navigating to the directory using [`here::here()`](https://here.r-lib.org/reference/here.html), since it's located below my project root (as opposed to in the directory in which I'm writing this post).\n\nThe target directory happens only to contain `.csv` files but, if it contained other filetypes, I could use the `glob` argument set to `\"*.csv\"` to restrict my results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\n\n# get the files\nplayoff_files <- dir_ls(here::here(\"data\", \"nba-playoffs\"))\n\n# see the files\nplayoff_files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/maraaverick/2022-tidyverse-advent/data/nba-playoffs/2018-player-totals.csv\n/Users/maraaverick/2022-tidyverse-advent/data/nba-playoffs/2019-player-totals.csv\n/Users/maraaverick/2022-tidyverse-advent/data/nba-playoffs/2020-player-totals.csv\n/Users/maraaverick/2022-tidyverse-advent/data/nba-playoffs/2021-player-totals.csv\n/Users/maraaverick/2022-tidyverse-advent/data/nba-playoffs/2022-player-totals.csv\n```\n:::\n\n```{.r .cell-code}\n# read them into a single data frame with the filenames\nplayoff_df <- playoff_files |> \n  purrr::map_df(readr::read_csv, .id = \"file\", show_col_types = FALSE)\n\n\n# glimpse the resulting data frame\ndplyr::glimpse(playoff_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,095\nColumns: 32\n$ file                <chr> \"/Users/maraaverick/2022-tidyverse-advent/data/nba…\n$ Rk                  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,…\n$ Player              <chr> \"Álex Abrines\", \"Steven Adams\", \"Bam Adebayo\", \"La…\n$ Pos                 <chr> \"SG\", \"C\", \"C\", \"C\", \"PF\", \"SF\", \"SF\", \"PF\", \"PF\",…\n$ Age                 <dbl> 24, 24, 20, 32, 27, 24, 24, 29, 23, 33, 20, 32, 28…\n$ Tm                  <chr> \"OKC\", \"OKC\", \"MIA\", \"SAS\", \"POR\", \"PHI\", \"SAS\", \"…\n$ G                   <dbl> 6, 6, 5, 5, 4, 7, 5, 11, 7, 6, 10, 17, 2, 4, 1, 19…\n$ GS                  <dbl> 0, 6, 0, 5, 4, 0, 1, 0, 7, 6, 10, 17, 0, 0, 0, 12,…\n$ MP                  <dbl> 110, 200, 77, 177, 131, 33, 73, 95, 280, 194, 238,…\n$ FG                  <dbl> 8, 27, 7, 37, 27, 3, 12, 7, 69, 27, 29, 50, 0, 1, …\n$ FGA                 <dbl> 20, 46, 15, 80, 52, 8, 20, 20, 121, 72, 52, 139, 1…\n$ `FG%`               <dbl> 0.400, 0.587, 0.467, 0.463, 0.519, 0.375, 0.600, 0…\n$ `3P`                <dbl> 6, 0, 0, 3, 13, 2, 0, 5, 4, 6, 13, 26, 0, 1, 0, 11…\n$ `3PA`               <dbl> 13, 0, 1, 5, 30, 7, 4, 15, 14, 28, 29, 91, 0, 1, 0…\n$ `3P%`               <dbl> 0.462, NA, 0.000, 0.600, 0.433, 0.286, 0.000, 0.33…\n$ `2P`                <dbl> 2, 27, 7, 34, 14, 1, 12, 2, 65, 21, 16, 24, 0, 0, …\n$ `2PA`               <dbl> 7, 46, 14, 75, 22, 1, 16, 5, 107, 44, 23, 48, 1, 3…\n$ `2P%`               <dbl> 0.286, 0.587, 0.500, 0.453, 0.636, 1.000, 0.750, 0…\n$ `eFG%`              <dbl> 0.550, 0.587, 0.467, 0.481, 0.644, 0.500, 0.600, 0…\n$ FT                  <dbl> 2, 9, 3, 41, 2, 0, 3, 0, 38, 11, 8, 23, 0, 1, 0, 1…\n$ FTA                 <dbl> 2, 13, 14, 42, 2, 0, 4, 0, 55, 15, 11, 31, 0, 2, 0…\n$ `FT%`               <dbl> 1.000, 0.692, 0.214, 0.976, 1.000, NA, 0.750, NA, …\n$ ORB                 <dbl> 3, 19, 9, 13, 12, 1, 5, 4, 8, 3, 9, 9, 0, 0, 0, 45…\n$ DRB                 <dbl> 13, 26, 11, 33, 24, 8, 8, 9, 59, 31, 12, 56, 0, 3,…\n$ TRB                 <dbl> 16, 45, 20, 46, 36, 9, 13, 13, 67, 34, 21, 65, 0, …\n$ AST                 <dbl> 2, 9, 0, 12, 5, 0, 3, 6, 44, 2, 7, 22, 0, 3, 0, 19…\n$ STL                 <dbl> 5, 4, 0, 3, 4, 1, 6, 3, 10, 10, 6, 19, 0, 1, 0, 4,…\n$ BLK                 <dbl> 2, 4, 2, 2, 2, 0, 1, 1, 6, 4, 4, 2, 0, 1, 0, 11, 2…\n$ TOV                 <dbl> 1, 4, 2, 9, 6, 2, 3, 3, 17, 6, 6, 10, 0, 3, 0, 8, …\n$ PF                  <dbl> 11, 15, 8, 9, 8, 8, 10, 10, 28, 14, 23, 44, 0, 1, …\n$ PTS                 <dbl> 24, 63, 17, 118, 69, 8, 27, 19, 180, 71, 79, 149, …\n$ `Player-additional` <chr> \"abrinal01\", \"adamsst01\", \"adebaba01\", \"aldrila01\"…\n```\n:::\n:::\n\n\nAs you can see, the filenames are stored in my result, which means I can use those names to extract important data I would have otherwise lost (in this case, the year).\n\n## Learn more\n\nThere's much more to fs than this one function, so it's well worth your time to check out the [**fs** intro](https://fs.r-lib.org/). Also be sure to peep [**Comparison of fs functions, base R, and shell commands**](https://fs.r-lib.org/articles/function-comparisons.html) for how those systems stack up.\n\nI would be remiss not to mention that there are *lots* of ways to read and combine multiple `.csv` files into one data frame in R. For an extensive (though not exhaustive) exploration of options, see the responses to the Stack Overflow question: [How to import multiple .csv files at once?](https://stackoverflow.com/questions/11433432/how-to-import-multiple-csv-files-at-once)\n\n[^1]: fs returns \\'tidy\\' paths that: always use `/` to delimit directories, and never have multiple `/` or trailing `/`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}