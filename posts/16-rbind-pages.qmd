---
title: "Day 16: `rbind_pages()`"
date: "2022-12-16"
description: |
  Got paginated JSON data? The `rbind_pages()` function from Jeroen Ooms' jsonlite package is here to save the day.
image: rbind-pages-thumb-min.png
image-alt: "rbind_pages(list()) written with three light pink data-frame icons in between the list parentheses. A downward arrow leads to a larger, darker pink data-frame icon."
tags: 
  - jsonlite
---

::: callout-note
## Note

The [jsonlite](https://github.com/jeroen/jsonlite) package is authored and maintained by [Jeroen Ooms](https://github.com/jeroen). I've decided to include it since it's installed and recommended by the tidyverse package for reading JSON data, and also *super* helpful!
:::

To borrow from its description on GitHub, [jsonlite](https://github.com/jeroen/jsonlite) [@jsonlite]:

> Offers simple, flexible tools for working with JSON in R, and is particularly powerful for building pipelines and interacting with a web API.

Basically, it provides mapping between JSON data and R classes and objects (like data frames).

When working with web APIs, you'll often encounter *paginated* data where the amount of data return is broken into pages with a given number of records. Once you've read in the data with the [`fromJSON()`](https://rdrr.io/cran/jsonlite/man/fromJSON.html) function, chances are that you'll want to combine those pages into a single data frame for your analysis. This is where [**`rbind_pages()`**](https://rdrr.io/cran/jsonlite/man/rbind_pages.html) comes in. It uses [`vctrs::vec_rbind()`](https://vctrs.r-lib.org/reference/vec_bind.html) to combine a list of data frames into a single data frame.

Let's do a quick example using data on the most popular TV shows from the [EpisoDate API](https://www.episodate.com/api). We'll get the first three pages of data.

```{r}
#| label: retrieve-data
library(jsonlite)

# base URL of the page
baseurl <- "https://www.episodate.com/api/most-popular?page="

mydata1 <- fromJSON(paste0(baseurl, "1"), flatten = TRUE)
mydata2 <- fromJSON(paste0(baseurl, "2"), flatten = TRUE)
mydata3 <- fromJSON(paste0(baseurl, "3"), flatten = TRUE)

# look at the data for one of the pages
dplyr::glimpse(mydata1$tv_shows)
```

Each page contains 20 records. We'll use `rbind_pages()` to combine the data from each page, which is stored in the `tv_shows` element of each page, then look at the number of rows to see that combining three pages results in the expected 60 records.

```{r}
tv_shows <- rbind_pages(
  list(mydata1$tv_shows, mydata2$tv_shows, mydata3$tv_shows)
)

nrow(tv_shows)
```

## Learn more

For more details on using `rbind_pages()`, including example code for automatically combining many pages, see the jsonlite vignette, [**Combining pages of JSON data with jsonlite**](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-paging.html). Also be sure to check out the other vignettes:

* [Getting started with JSON and jsonlite](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html);  
* [Fetching JSON data from REST APIs](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-apis.html);  
* [A mapping between JSON data and R objects](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-mapping.pdf); and 
* [Simple JSON RPC with OpenCPU](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-opencpu.pdf).

You can learn the details of how jsonlite works in the paper 
[**The jsonlite Package: A Practical and Consistent Mapping Between JSON Data and R Objects**](https://arxiv.org/abs/1403.2805) [@jsonlite].
