---
title: "Day 2: `cli_progress_*()`"
date: "2022-12-02"
description:  |
  Show progress in your code using the `cli_progress_*()` family of functions from the cli package.
tags: 
  - cli
  - progress bars
format: 
  html:
    code-line-numbers: true
knitr: 
  opts_chunk: 
    collapse: true
bibliography: references.bib
---

```{r}
#| label: asciicast-setup
#| echo: false
#| results: hide
#| purl: false
asciicast::init_knitr_engine()
```

```{asciicast, include = FALSE, cache = FALSE}
#| label: asciicast-tick-time
set.seed(1)
Sys.setenv(CLI_TICK_TIME = "100")
```

```{asciicast}
#| label: progress-setup
#| cache: false
#| include: false
library(cli)
options(cli.progress_show_after = 0)
options(cli.progress_clear = FALSE)
options(cli.progress_format_iterator = NULL)
options(cli.progress_format_iterator_nototal = NULL)
options(cli.progress_format_tasks = NULL)
options(cli.progress_format_tasks_nototal = NULL)
options(cli.progress_format_download = NULL)
options(cli.progress_format_download_nototal = NULL)
```

The [cli package](https://cli.r-lib.org/) [@cli] provides helpers for developing attractive command line interfaces and output. It has lots of great features worth checking out, but today we're going to talk about one of my favorites: progress bars!

::: callout-tip
## Tip

This post is just a quick highlight reel, check out cli's progress-bar vignettes for more details:

-   [Introduction to progress bars in cli](https://cli.r-lib.org/articles/progress.html)

-   [Advanced cli progress bars](https://cli.r-lib.org/articles/progress-advanced.html)
:::

## Progress bar basics

To lift straight from the [progress-bar intro vignette](https://cli.r-lib.org/articles/progress.html), adding a progress bar is a three-step/three-function process:

1.  Call [`cli_progress_bar()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to create a progress bar.

2.  Call [`cli_progress_update()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to update it.

3.  Call [`cli_progress_done()`](https://cli.r-lib.org/reference/cli_progress_bar.html) to terminate it.

We'll use these three steps in our pretend cleaning function, below:

```{r}
#| label: basic-progress-bar
#| echo: true
#| eval: false
clean <- function() {
  cli_progress_bar("Cleaning data", total = 100)
  for (i in 1:100) {
    Sys.sleep(5/100)
    cli_progress_update()
  }
  cli_progress_done()
}
```

We created our progress bar with `cli_progress_bar()` on line 2, told it how often to update (after each iteration) with `cli_progress_update()` on line 5, and when to finish with `cli_progress_done()` on line 7.

If we were to run that function, we'd get the following output.

```{r}
#| label: dummy-clean
#| echo: true
#| eval: false
#| code-line-numbers: false
clean()
```

![](cli-classic-example.svg){fig-alt="Progress bar that says \"cleaning data\" with a series of boxes that update along with a percentage and an ETA until done."}
